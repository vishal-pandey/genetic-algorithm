# -*- coding: utf-8 -*-
"""genetic_algo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1na8R6PG0RNGEciMo69JPy0piDPxsUCMn
"""

from random import randint

def individual(length, min, max):
  'Create a member of the population'
  return [randint(min, max) for x in range(0,length)]

individual(6,0,100)

individual(5,0,100)

def population(count, length, min, max):
  return [individual(length, min, max) for x in range(0, count)]

population(5,5,0,100)

from operator import add
import functools

def fitness(individual, target):
  sum = functools.reduce(add, individual, 0)
  return abs(target - sum)

x = individual(5,0,100)
print(x)

fitness(x, 200)

def grade(pop, target):
  summed = functools.reduce(add, (fitness(x, target) for x in pop), 0)
  return summed / (len(pop) * 1.0)

pop = population(3,5,0,100)

pop

target = 200
grade(pop, target)

from random import random, randint
random()

def evolve(pop, target, retain=0.2, random_select=0.5, mutate=0.01):
  graded = [(fitness(x, target), x) for x in pop]  # Find fitness of individual in the population
  graded = [ x[1] for x in sorted(graded)]  # Order the individual in order of fitness
  retain_length = int(len(graded)*retain)  # Find how many members to make parent
  parents = graded[:retain_length]  # Select the parent from the population
  
  #  Randomly add other individuals to promote genetic diversity
  for individual in graded[retain_length:]:
    if random_select > random():
      parents.append(individual)
      
      
  #  Mutate some individual
  for individual in parents:
    if mutate > random():
      pos_to_mutate = randint(0, len(individual)-1)
      individual[pos_to_mutate] = randint(min(individual), max(individual))

  #  Crossover parents to create children
  parents_length = len(parents)
  desired_length = len(pop) - parents_length
  children = []
  
  while len(children) < desired_length:
    male = randint(0, parents_length-1)
    female = randint(0, parents_length-1)
    if male != female:
      male = parents[male]
      female = parents[female]
      half = int(len(male) / 2)
      child = male[:half] + female[half:]
      children.append(child)
      
  parents.extend(children)
  return parents

v_pop = population(100, 5, 0, 100)

target = 190

fitness_history = [grade(v_pop, target)]

fitness_history

for i in range(0, 200):
  v_pop = evolve(v_pop, target)
  fitness_history.append(grade(v_pop, target))

fitness_history

v_pop

vishal = 0
for x in v_pop:
  if sum(x) == target:
    vishal += 1
  else:
    print(x)
  
print(vishal/len(v_pop)*100)

